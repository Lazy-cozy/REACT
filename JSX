JSX is a syntax extension for JavaScript. It was written to be used with React. JSX code looks a lot like HTML.
A basic unit of JSX is called a JSX element.
JSX elements are treated as JavaScript expressions. 

JSX elements can have attributes 
///////////////
my-attribute-name="my-attribute-value" .
const p1 = <p id='large'>foo</p>;
const p2 = <p id='small'>bar</p>;
////////////////

You can nest JSX elements inside of other JSX elements
If a JSX expression takes up more than one line, then you must wrap the multi-line JSX expression in parentheses.
/////////////////
const myDiv = (
  <div>
    <h1>Hello world</h1>
  </div>
 );
 ///////////////
 
 a JSX expression must have exactly one outermost element.
 If you notice that a JSX expression has multiple outer elements, the solution is usually simple: wrap the JSX expression in a <div></div>.
 //////////////
 const paragraphs = (
  <div id="i-am-the-outermost-element">
    <p>I am a paragraph.</p>
    <p>I, too, am a paragraph.</p>
  </div>
);
///////////////

Rendering JSX
To render a JSX expression means to make it appear onscreen.
///////////
ReactDOM.render(<h1>Hello world</h1>, 
document.getElementById('app'));
//////////

ReactDOM.render()
ReactDOM is the name of a JavaScript library. This library contains several React-specific methods
ReactDOM‘s methods: ReactDOM.render().
ReactDOM.render() is the most common way to render JSX. It takes a JSX expression, 
creates a corresponding tree of DOM nodes, and adds that tree to the DOM. 
That is the way to make a JSX expression appear onscreen.

Passing a Variable to ReactDOM.render()
ReactDOM.render()‘s first argument should evaluate to a JSX expression, it doesn’t have to literally be a JSX expression.
The first argument could also be a variable, so long as that variable evaluates to a JSX expression.
































 
 
